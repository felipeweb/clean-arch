// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/felipeweb/clean-arch/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockPortRepository is a mock of PortRepository interface.
type MockPortRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortRepositoryMockRecorder
}

// MockPortRepositoryMockRecorder is the mock recorder for MockPortRepository.
type MockPortRepositoryMockRecorder struct {
	mock *MockPortRepository
}

// NewMockPortRepository creates a new mock instance.
func NewMockPortRepository(ctrl *gomock.Controller) *MockPortRepository {
	mock := &MockPortRepository{ctrl: ctrl}
	mock.recorder = &MockPortRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortRepository) EXPECT() *MockPortRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockPortRepository) Save(ctx context.Context, port *entity.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPortRepositoryMockRecorder) Save(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPortRepository)(nil).Save), ctx, port)
}

// MockPortUsecase is a mock of PortUsecase interface.
type MockPortUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPortUsecaseMockRecorder
}

// MockPortUsecaseMockRecorder is the mock recorder for MockPortUsecase.
type MockPortUsecaseMockRecorder struct {
	mock *MockPortUsecase
}

// NewMockPortUsecase creates a new mock instance.
func NewMockPortUsecase(ctrl *gomock.Controller) *MockPortUsecase {
	mock := &MockPortUsecase{ctrl: ctrl}
	mock.recorder = &MockPortUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortUsecase) EXPECT() *MockPortUsecaseMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockPortUsecase) Save(ctx context.Context, key string, info *entity.PortInfo) (*entity.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, key, info)
	ret0, _ := ret[0].(*entity.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockPortUsecaseMockRecorder) Save(ctx, key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPortUsecase)(nil).Save), ctx, key, info)
}
